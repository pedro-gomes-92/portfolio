{"ast":null,"code":"import _slicedToArray from\"/Users/petrogomes/projects/personal/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import classnames from'classnames';import{Header,NavBar,TextButton}from'dots';import imgLogo from\"./assets/logo.svg\";import{isScrolling as isWindowScrolling,getCurrent,scrollTo}from'./utils';var Component=function Component(_ref){var elements=_ref.elements,reference=_ref.reference,offsetScroll=_ref.offsetScroll;var _useState=useState(isWindowScrolling()),_useState2=_slicedToArray(_useState,2),isScrolling=_useState2[0],setIsScrolling=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),current=_useState4[0],setCurrent=_useState4[1];useEffect(function(){var handleScroll=function handleScroll(){var active=document.activeElement;if(active){active.blur();}setIsScrolling(isWindowScrolling());setCurrent(getCurrent(elements,offsetScroll));};window.addEventListener('scroll',handleScroll);},[elements,offsetScroll]);return React.createElement(Header,{reference:reference,className:classnames({'is-scrolling':isScrolling})},React.createElement(NavBar,{brand:imgLogo},elements.map(function(element){var name=element.getAttribute('id')||'';return React.createElement(TextButton,{key:\"key-header-item-\".concat(name),text:name,size:5,onClick:function onClick(){scrollTo(element,-offsetScroll);},className:classnames({'is-active':current===name})});})));};Component.defaultProps={offsetScroll:0};export default Component;","map":{"version":3,"sources":["/Users/petrogomes/projects/personal/portfolio/src/components/Header/index.tsx"],"names":["React","useState","useEffect","classnames","Header","NavBar","TextButton","isScrolling","isWindowScrolling","getCurrent","scrollTo","Component","elements","reference","offsetScroll","setIsScrolling","current","setCurrent","handleScroll","active","document","activeElement","blur","window","addEventListener","imgLogo","map","element","name","getAttribute","defaultProps"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAoBC,QAApB,CAA8BC,SAA9B,KAA+C,OAA/C,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,MAAT,CAAiBC,MAAjB,CAAyBC,UAAzB,KAAwD,MAAxD,C,uCAGA,OAASC,WAAW,GAAIC,CAAAA,iBAAxB,CAA2CC,UAA3C,CAAuDC,QAAvD,KAAuE,SAAvE,CAQA,GAAMC,CAAAA,SAAoB,CAAG,QAAvBA,CAAAA,SAAuB,MAA2C,IAAxCC,CAAAA,QAAwC,MAAxCA,QAAwC,CAA9BC,SAA8B,MAA9BA,SAA8B,CAAnBC,YAAmB,MAAnBA,YAAmB,eAChCb,QAAQ,CAACO,iBAAiB,EAAlB,CADwB,wCAC/DD,WAD+D,eAClDQ,cADkD,8BAExCd,QAAQ,CAAgB,IAAhB,CAFgC,yCAE/De,OAF+D,eAEtDC,UAFsD,eAItEf,SAAS,CAAC,UAAM,CACd,GAAMgB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAMC,CAAAA,MAAM,CAAGC,QAAQ,CAACC,aAAxB,CACA,GAAIF,MAAJ,CAAY,CACVA,MAAM,CAACG,IAAP,GACD,CAEDP,cAAc,CAACP,iBAAiB,EAAlB,CAAd,CACAS,UAAU,CAACR,UAAU,CAACG,QAAD,CAAWE,YAAX,CAAX,CAAV,CACD,CARD,CAUAS,MAAM,CAACC,gBAAP,CAAwB,QAAxB,CAAkCN,YAAlC,EACD,CAZQ,CAYN,CAACN,QAAD,CAAWE,YAAX,CAZM,CAAT,CAcA,MACE,qBAAC,MAAD,EAAQ,SAAS,CAAED,SAAnB,CAA8B,SAAS,CAAEV,UAAU,CAAC,CAAE,eAAgBI,WAAlB,CAAD,CAAnD,EACE,oBAAC,MAAD,EAAQ,KAAK,CAAEkB,OAAf,EACGb,QAAQ,CAACc,GAAT,CAAa,SAAAC,OAAO,CAAI,CACvB,GAAMC,CAAAA,IAAI,CAAGD,OAAO,CAACE,YAAR,CAAqB,IAArB,GAA8B,EAA3C,CACA,MACE,qBAAC,UAAD,EACE,GAAG,2BAAqBD,IAArB,CADL,CAEE,IAAI,CAAEA,IAFR,CAGE,IAAI,CAAE,CAHR,CAIE,OAAO,CAAE,kBAAM,CACblB,QAAQ,CAACiB,OAAD,CAAU,CAACb,YAAX,CAAR,CACD,CANH,CAOE,SAAS,CAAEX,UAAU,CAAC,CAAE,YAAaa,OAAO,GAAKY,IAA3B,CAAD,CAPvB,EADF,CAWD,CAbA,CADH,CADF,CADF,CAoBD,CAtCD,CAwCAjB,SAAS,CAACmB,YAAV,CAAyB,CACvBhB,YAAY,CAAE,CADS,CAAzB,CAIA,cAAeH,CAAAA,SAAf","sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport classnames from 'classnames';\nimport { Header, NavBar, TextButton, HeaderProps } from 'dots';\n\nimport imgLogo from './assets/logo.svg';\nimport { isScrolling as isWindowScrolling, getCurrent, scrollTo } from './utils';\n\ninterface Props {\n  reference: HeaderProps['reference'];\n  elements: HTMLElement[];\n  offsetScroll: number;\n}\n\nconst Component: FC<Props> = ({ elements, reference, offsetScroll }) => {\n  const [isScrolling, setIsScrolling] = useState(isWindowScrolling());\n  const [current, setCurrent] = useState<string | null>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const active = document.activeElement as HTMLElement;\n      if (active) {\n        active.blur();\n      }\n\n      setIsScrolling(isWindowScrolling());\n      setCurrent(getCurrent(elements, offsetScroll));\n    };\n\n    window.addEventListener('scroll', handleScroll);\n  }, [elements, offsetScroll]);\n\n  return (\n    <Header reference={reference} className={classnames({ 'is-scrolling': isScrolling })}>\n      <NavBar brand={imgLogo}>\n        {elements.map(element => {\n          const name = element.getAttribute('id') || '';\n          return (\n            <TextButton\n              key={`key-header-item-${name}`}\n              text={name}\n              size={5}\n              onClick={() => {\n                scrollTo(element, -offsetScroll);\n              }}\n              className={classnames({ 'is-active': current === name })}\n            />\n          );\n        })}\n      </NavBar>\n    </Header>\n  );\n};\n\nComponent.defaultProps = {\n  offsetScroll: 0,\n};\n\nexport default Component;\n"]},"metadata":{},"sourceType":"module"}